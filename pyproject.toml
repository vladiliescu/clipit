[project]
name = "grabit"
version = "0.7.2"
description = "Grabit is a command-line tool that allows you to download web pages, extract their readable content, convert it to Markdown, and save it locally."
readme = "README.md"
requires-python = ">=3.11"
license = "GPL-3.0"
license-files = ["LICEN[CS]E*"]
authors = [{ name = "Vlad Iliescu" }]
keywords = ["python", "markdown", "cli", "web scraping", "downloader", "scraper"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
dependencies = ["click>=8.1.0,<8.2", "readabilipy==0.3.0", "markdownify==0.14.1", "PyYAML==6.0.2", "requests==2.32.3", "mdformat==0.7.21"]

[dependency-groups]
# uv-only groups for local development; not published as pip extras
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=1.1.0",
    "python-dotenv==1.1.1",
    "ruff>=0.5.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py311"
src = ["."]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
lint.select = ["I", "E4", "E7", "E9", "F"]
lint.ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
lint.fixable = ["ALL"]
lint.unfixable = []

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Like Black, use double quotes for strings.
format.quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
format.indent-style = "space"

# Like Black, respect magic trailing commas.
format.skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
format.line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
format.docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
format.docstring-code-line-length = "dynamic"
